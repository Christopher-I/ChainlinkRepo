     host: 'CustomProvider',
     connection:
      { wallet_hdpath: 'm/44\'/60\'/0\'/0/',
        wallets: [Object],
        addresses: [Array],
        engine: [l],
        hdwallet: [o] } },
  _defaultAccount: undefined,
  _defaultBlock: 'latest',
  _transactionBlockTimeout: 50,
  _transactionConfirmationBlocks: 24,
  _transactionPollingTimeout: 750,
  _defaultGasPrice: undefined,
  _defaultGas: undefined,
  BatchRequest: [Function],
  contractModuleFactory:
   ContractModuleFactory {
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiCoder:
   AbiCoder {
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     ethersAbiCoder: AbiCoder { coerceFunc: [Function] } },
  utils:
   { BN:
      { [Function: BN]
        BN: [Circular],
        wordSize: 26,
        isBN: [Function: isBN],
        max: [Function: max],
        min: [Function: min],
        red: [Function: red],
        _prime: [Function: prime],
        mont: [Function: mont] },
     asciiToHex: [Function: asciiToHex],
     bytesToHex: [Function: bytesToHex],
     checkAddressChecksum: [Function: checkAddressChecksum],
     fromAscii: [Function: asciiToHex],
     fromDecimal: [Function: numberToHex],
     fromUtf8: [Function: utf8ToHex],
     fromWei: [Function: fromWei],
     getSignatureParameters: [Function: getSignatureParameters],
     getUnitValue: [Function: getUnitValue],
     hexToAscii: [Function: hexToAscii],
     hexToBytes: [Function: hexToBytes],
     hexToNumber: [Function: hexToNumber],
     hexToNumberString: [Function: hexToNumberString],
     hexToString: [Function: hexToUtf8],
     hexToUtf8: [Function: hexToUtf8],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     isBloom: [Function: isBloom],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isTopic: [Function: isTopic],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     keccak256: { [Function: keccak256] _Hash: [Object] },
     numberToHex: [Function: numberToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     randomHex: [Function: randomHex],
     sha3: { [Function: keccak256] _Hash: [Object] },
     soliditySha3: [Function: soliditySha3],
     stringToHex: [Function: utf8ToHex],
     stripHexPrefix: [Function: stripHexPrefix],
     toAscii: [Function: hexToAscii],
     toBN: [Function: toBN],
     toChecksumAddress: [Function: toChecksumAddress],
     toDecimal: [Function: hexToNumber],
     toHex: [Function: toHex],
     toTwosComplement: [Function: toTwosComplement],
     toUtf8: [Function: hexToUtf8],
     toWei: [Function: toWei],
     utf8ToHex: [Function: utf8ToHex] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  abiMapper:
   AbiMapper {
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     contractModuleFactory:
      ContractModuleFactory { utils: [Object], formatters: [Object], abiCoder: [AbiCoder] },
     hasConstructor: false },
  options:
   { defaultAccount: undefined,
     defaultBlock: 'latest',
     defaultGas: undefined,
     defaultGasPrice: undefined,
     transactionBlockTimeout: 50,
     transactionConfirmationBlocks: 24,
     transactionPollingTimeout: 750,
     transactionSigner: TransactionSigner { utils: [Object], formatters: [Object] },
     data: undefined,
     address: '0x0A14C5b1bF087324eeAe3473131d271353c1942D' },
  accounts:
   Accounts {
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      CustomProvider { host: 'CustomProvider', connection: [Object] },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     _transactionSigner: TransactionSigner { utils: [Object], formatters: [Object] },
     defaultKeyName: 'web3js_wallet',
     accounts: {},
     accountsIndex: 0,
     wallet:
      Wallet {
        utils: [Object],
        accountsModule: [Circular],
        defaultKeyName: 'web3js_wallet',
        accounts: {},
        accountsIndex: 0 } },
  methodFactory:
   MethodFactory {
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     contractModuleFactory:
      ContractModuleFactory { utils: [Object], formatters: [Object], abiCoder: [AbiCoder] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiModel: AbiModel { abi: { methods: [Object], events: {} } },
  transactionSigner:
   TransactionSigner {
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] } },
  methods:
   MethodsProxy {
     contract: [Circular],
     methodFactory:
      MethodFactory {
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        abiCoder: [AbiCoder] },
     methodEncoder: MethodEncoder { abiCoder: [AbiCoder] },
     methodOptionsValidator: MethodOptionsValidator { utils: [Object] },
     methodOptionsMapper:
      MethodOptionsMapper { utils: [Object], formatters: [Object] } },
  events:
   EventSubscriptionsProxy {
     contract: [Circular],
     eventSubscriptionFactory:
      EventSubscriptionFactory { utils: [Object], formatters: [Object] },
     eventOptionsMapper:
      EventOptionsMapper {
        formatters: [Object],
        eventFilterEncoder: [EventFilterEncoder] },
     eventLogDecoder: EventLogDecoder { abiCoder: [AbiCoder] },
     allEventsLogDecoder: AllEventsLogDecoder { abiCoder: [AbiCoder] },
     allEventsOptionsMapper:
      AllEventsOptionsMapper {
        formatters: [Object],
        allEventsFilterEncoder: [AllEventsFilterEncoder] } } }
clear
^C
christophers-MacBook-Pro% clear
christophers-MacBook-Pro% node getResult
AbstractContract {
  providerResolver:
   ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
  givenProvider: null,
  _currentProvider:
   CustomProvider {
     host: 'CustomProvider',
     connection:
      { wallet_hdpath: 'm/44\'/60\'/0\'/0/',
        wallets: [Object],
        addresses: [Array],
        engine: [l],
        hdwallet: [o] } },
  _defaultAccount: undefined,
  _defaultBlock: 'latest',
  _transactionBlockTimeout: 50,
  _transactionConfirmationBlocks: 24,
  _transactionPollingTimeout: 750,
  _defaultGasPrice: undefined,
  _defaultGas: undefined,
  BatchRequest: [Function],
  contractModuleFactory:
   ContractModuleFactory {
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiCoder:
   AbiCoder {
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     ethersAbiCoder: AbiCoder { coerceFunc: [Function] } },
  utils:
   { BN:
      { [Function: BN]
        BN: [Circular],
        wordSize: 26,
        isBN: [Function: isBN],
        max: [Function: max],
        min: [Function: min],
        red: [Function: red],
        _prime: [Function: prime],
        mont: [Function: mont] },
     asciiToHex: [Function: asciiToHex],
     bytesToHex: [Function: bytesToHex],
     checkAddressChecksum: [Function: checkAddressChecksum],
     fromAscii: [Function: asciiToHex],
     fromDecimal: [Function: numberToHex],
     fromUtf8: [Function: utf8ToHex],
     fromWei: [Function: fromWei],
     getSignatureParameters: [Function: getSignatureParameters],
     getUnitValue: [Function: getUnitValue],
     hexToAscii: [Function: hexToAscii],
     hexToBytes: [Function: hexToBytes],
     hexToNumber: [Function: hexToNumber],
     hexToNumberString: [Function: hexToNumberString],
     hexToString: [Function: hexToUtf8],
     hexToUtf8: [Function: hexToUtf8],
     isAddress: [Function: isAddress],
     isBN: [Function: isBN],
     isBloom: [Function: isBloom],
     isHex: [Function: isHex],
     isHexStrict: [Function: isHexStrict],
     isTopic: [Function: isTopic],
     jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
     keccak256: { [Function: keccak256] _Hash: [Object] },
     numberToHex: [Function: numberToHex],
     padLeft: [Function: leftPad],
     padRight: [Function: rightPad],
     randomHex: [Function: randomHex],
     sha3: { [Function: keccak256] _Hash: [Object] },
     soliditySha3: [Function: soliditySha3],
     stringToHex: [Function: utf8ToHex],
     stripHexPrefix: [Function: stripHexPrefix],
     toAscii: [Function: hexToAscii],
     toBN: [Function: toBN],
     toChecksumAddress: [Function: toChecksumAddress],
     toDecimal: [Function: hexToNumber],
     toHex: [Function: toHex],
     toTwosComplement: [Function: toTwosComplement],
     toUtf8: [Function: hexToUtf8],
     toWei: [Function: toWei],
     utf8ToHex: [Function: utf8ToHex] },
  formatters:
   { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
     isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
     inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
     inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
     txInputFormatter: [Function: txInputFormatter],
     inputCallFormatter: [Function: inputCallFormatter],
     inputTransactionFormatter: [Function: inputTransactionFormatter],
     inputSignFormatter: [Function: inputSignFormatter],
     outputTransactionFormatter: [Function: outputTransactionFormatter],
     outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
     outputBlockFormatter: [Function: outputBlockFormatter],
     inputLogFormatter: [Function: inputLogFormatter],
     outputLogFormatter: [Function: outputLogFormatter],
     inputPostFormatter: [Function: inputPostFormatter],
     outputPostFormatter: [Function: outputPostFormatter],
     inputAddressFormatter: [Function: inputAddressFormatter],
     outputSyncingFormatter: [Function: outputSyncingFormatter] },
  abiMapper:
   AbiMapper {
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] },
     contractModuleFactory:
      ContractModuleFactory { utils: [Object], formatters: [Object], abiCoder: [AbiCoder] },
     hasConstructor: false },
  options:
   { defaultAccount: undefined,
     defaultBlock: 'latest',
     defaultGas: undefined,
     defaultGasPrice: undefined,
     transactionBlockTimeout: 50,
     transactionConfirmationBlocks: 24,
     transactionPollingTimeout: 750,
     transactionSigner: TransactionSigner { utils: [Object], formatters: [Object] },
     data: undefined,
     address: '0x0A14C5b1bF087324eeAe3473131d271353c1942D' },
  accounts:
   Accounts {
     providerResolver:
      ProviderResolver { providersModuleFactory: ProvidersModuleFactory {} },
     givenProvider: null,
     _currentProvider:
      CustomProvider { host: 'CustomProvider', connection: [Object] },
     _defaultAccount: undefined,
     _defaultBlock: 'latest',
     _transactionBlockTimeout: 50,
     _transactionConfirmationBlocks: 24,
     _transactionPollingTimeout: 750,
     _defaultGasPrice: undefined,
     _defaultGas: undefined,
     BatchRequest: [Function],
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     _transactionSigner: TransactionSigner { utils: [Object], formatters: [Object] },
     defaultKeyName: 'web3js_wallet',
     accounts: {},
     accountsIndex: 0,
     wallet:
      Wallet {
        utils: [Object],
        accountsModule: [Circular],
        defaultKeyName: 'web3js_wallet',
        accounts: {},
        accountsIndex: 0 } },
  methodFactory:
   MethodFactory {
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] },
     contractModuleFactory:
      ContractModuleFactory { utils: [Object], formatters: [Object], abiCoder: [AbiCoder] },
     abiCoder: AbiCoder { utils: [Object], ethersAbiCoder: [AbiCoder] } },
  abiModel: AbiModel { abi: { methods: [Object], events: {} } },
  transactionSigner:
   TransactionSigner {
     utils:
      { BN: [Function],
        asciiToHex: [Function: asciiToHex],
        bytesToHex: [Function: bytesToHex],
        checkAddressChecksum: [Function: checkAddressChecksum],
        fromAscii: [Function: asciiToHex],
        fromDecimal: [Function: numberToHex],
        fromUtf8: [Function: utf8ToHex],
        fromWei: [Function: fromWei],
        getSignatureParameters: [Function: getSignatureParameters],
        getUnitValue: [Function: getUnitValue],
        hexToAscii: [Function: hexToAscii],
        hexToBytes: [Function: hexToBytes],
        hexToNumber: [Function: hexToNumber],
        hexToNumberString: [Function: hexToNumberString],
        hexToString: [Function: hexToUtf8],
        hexToUtf8: [Function: hexToUtf8],
        isAddress: [Function: isAddress],
        isBN: [Function: isBN],
        isBloom: [Function: isBloom],
        isHex: [Function: isHex],
        isHexStrict: [Function: isHexStrict],
        isTopic: [Function: isTopic],
        jsonInterfaceMethodToString: [Function: jsonInterfaceMethodToString],
        keccak256: [Function],
        numberToHex: [Function: numberToHex],
        padLeft: [Function: leftPad],
        padRight: [Function: rightPad],
        randomHex: [Function: randomHex],
        sha3: [Function],
        soliditySha3: [Function: soliditySha3],
        stringToHex: [Function: utf8ToHex],
        stripHexPrefix: [Function: stripHexPrefix],
        toAscii: [Function: hexToAscii],
        toBN: [Function: toBN],
        toChecksumAddress: [Function: toChecksumAddress],
        toDecimal: [Function: hexToNumber],
        toHex: [Function: toHex],
        toTwosComplement: [Function: toTwosComplement],
        toUtf8: [Function: hexToUtf8],
        toWei: [Function: toWei],
        utf8ToHex: [Function: utf8ToHex] },
     formatters:
      { outputBigNumberFormatter: [Function: outputBigNumberFormatter],
        isPredefinedBlockNumber: [Function: isPredefinedBlockNumber],
        inputDefaultBlockNumberFormatter: [Function: inputDefaultBlockNumberFormatter],
        inputBlockNumberFormatter: [Function: inputBlockNumberFormatter],
        txInputFormatter: [Function: txInputFormatter],
        inputCallFormatter: [Function: inputCallFormatter],
        inputTransactionFormatter: [Function: inputTransactionFormatter],
        inputSignFormatter: [Function: inputSignFormatter],
        outputTransactionFormatter: [Function: outputTransactionFormatter],
        outputTransactionReceiptFormatter: [Function: outputTransactionReceiptFormatter],
        outputBlockFormatter: [Function: outputBlockFormatter],
        inputLogFormatter: [Function: inputLogFormatter],
        outputLogFormatter: [Function: outputLogFormatter],
        inputPostFormatter: [Function: inputPostFormatter],
        outputPostFormatter: [Function: outputPostFormatter],
        inputAddressFormatter: [Function: inputAddressFormatter],
        outputSyncingFormatter: [Function: outputSyncingFormatter] } },
  methods:
   MethodsProxy {
     contract: [Circular],
     methodFactory:
      MethodFactory {
        utils: [Object],
        formatters: [Object],
        contractModuleFactory: [ContractModuleFactory],
        abiCoder: [AbiCoder] },
     methodEncoder: MethodEncoder { abiCoder: [AbiCoder] },
     methodOptionsValidator: MethodOptionsValidator { utils: [Object] },
     methodOptionsMapper:
      MethodOptionsMapper { utils: [Object], formatters: [Object] } },
  events:
   EventSubscriptionsProxy {
     contract: [Circular],
     eventSubscriptionFactory:
      EventSubscriptionFactory { utils: [Object], formatters: [Object] },
     eventOptionsMapper:
      EventOptionsMapper {
        formatters: [Object],
        eventFilterEncoder: [EventFilterEncoder] },
     eventLogDecoder: EventLogDecoder { abiCoder: [AbiCoder] },
     allEventsLogDecoder: AllEventsLogDecoder { abiCoder: [AbiCoder] },
     allEventsOptionsMapper:
      AllEventsOptionsMapper {
        formatters: [Object],
        allEventsFilterEncoder: [AllEventsFilterEncoder] } } }